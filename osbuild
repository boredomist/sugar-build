#!/usr/bin/env python
# Copyright 2013 Daniel Narvaez
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import os
import shutil
import subprocess
import sys
import tarfile
import urllib2
import StringIO

base_dir = os.path.dirname(os.path.abspath(__file__))
virtualenv_version = "1.9.1"
sandbox_dir = os.path.join(base_dir, "build", "out", "sandbox")
virtualenv_dir = os.path.join(sandbox_dir, "install")
cache_dir = os.path.join(sandbox_dir, "cache")
main_repo = "sugarlabs/sugar-build"
docs_url = "http://developer.sugarlabs.org/dev-environment.md.html"
buildbot_env = "SUGAR_BUILDBOT"


def get_cache_dir():
    return os.path.join(base_dir, cache_dir)


def get_virtualenv_dir():
    return os.path.join(base_dir, virtualenv_dir)


def get_stamp_path():
    return os.path.join(sandbox_dir, "stamp")


def get_bin_path(name=None):
    bin_path = os.path.join(get_virtualenv_dir(), "bin")

    if name is None:
        return bin_path
    else:
        return os.path.join(bin_path, name)


def create_virtualenv():
    source_dir = os.path.join(get_cache_dir(),
                              "virtualenv-%s" % virtualenv_version)

    if not os.path.exists(source_dir):
        url = "https://pypi.python.org/packages/source/v/" \
              "virtualenv/virtualenv-%s.tar.gz" % virtualenv_version

        f = urllib2.urlopen(url)
        buffer = StringIO.StringIO(f.read())
        with tarfile.open(fileobj=buffer, mode="r:gz") as tar:
            tar.extractall(get_cache_dir())

    subprocess.check_call(["python",
                           os.path.join(source_dir, "virtualenv.py"),
                           "-p", "python2.7",
                           "-q", "--system-site-packages",
                           get_virtualenv_dir()])


def install_osbuild():
    subprocess.check_call([get_bin_path("pip"), "-q", "install",
                           "git+git://github.com/boredomist/osbuild"])


def check_stamp():
    changed = []
    new_stamp = {}
    saved_stamp = {}

    stamp_path = get_stamp_path()

    try:
        os.makedirs(os.path.dirname(stamp_path))
    except OSError:
        pass

    try:
        with open(stamp_path) as f:
            saved_stamp = json.load(f)
    except (IOError, ValueError):
        pass

    for repo in main_repo, "dnarvaez/osbuild":
        url = "https://api.github.com/repos/%s/branches/master" % repo
        headers = {}

        etag = saved_stamp.get(repo, {}).get("etag", None)
        if etag:
            headers = {"If-None-Match": etag}

        code = 200

        try:
            response = urllib2.urlopen(urllib2.Request(url, headers=headers))
        except urllib2.HTTPError, e:
            if e.code in (304, 403):
                code = e.code
            else:
                raise e

        if code == 200:
            sha = json.load(response)["commit"]["sha"]

            if saved_stamp.get(repo, {}).get("sha", None) != sha:
                changed.append(repo)

            new_stamp[repo] = {"sha": sha,
                           "etag": response.info()["ETag"]}
        elif code == 304:
            new_stamp[repo] = saved_stamp[repo]
        elif code == 403:
            print("WARNING: GitHub rate limiting exceeded")
            changed.append(repo)

    with open(stamp_path, "w") as f:
        json.dump(new_stamp, f)

    return changed


def delete_virtualenv():
    try:
        shutil.rmtree(get_virtualenv_dir())
    except OSError:
        pass


def check_dependencies():
    args = ["pkg-config", "--exists", "python-2.7"]

    try:
        if subprocess.call(args) != 0:
            print("Please install the python development package.")
            return False
    except:
        print("Please install pkg-config.")
        return False

    return True


def main():
    if os.geteuid() == 0:
        print("osbuild should not be run as root.")
        sys.exit(1)

    if "OSBUILD_SHELL" in os.environ:
        print("Don't run osbuild inside an osbuild shell, you can just " \
              "run the commands directly.")
        sys.exit(1)

    if not check_dependencies():
        sys.exit(1)

    os.environ["PIP_DOWNLOAD_CACHE"] = get_cache_dir()

    if len(sys.argv) > 1:
        command = sys.argv[1]
    else:
        command = "shell"

    check_exception = None
    changed = []

    if command in ["shell", "pull"]:
        try:
            changed = check_stamp()
        except (urllib2.HTTPError, urllib2.URLError), e:
            check_exception = e

    build_virtualenv = not os.path.exists(get_virtualenv_dir())

    if "boredomist/osbuild" in changed:
        build_virtualenv = True

    if build_virtualenv or check_exception:
        print("= Setup the build system =\n")
        if check_exception:
            print ("Failed to check for changes, skipping setup. "
                   "Is your network working?")
            print ("Error: %s" % check_exception)

    if build_virtualenv:
        delete_virtualenv()

        try:
            print("* Create the python virtualenv")
            create_virtualenv()

            print("* Install osbuild package")
            install_osbuild()
        except Exception, e:
            delete_virtualenv()
            raise e

    is_buildbot = buildbot_env in os.environ
    if main_repo in changed and not is_buildbot:
        print("* Pull latest %s" % main_repo)
        subprocess.check_call(["git", "pull", "--ff-only", "-q"])

    commands_dir = os.path.join(base_dir, "build", "commands")
    command_path = os.path.join(commands_dir, command)

    available_commands = os.listdir(commands_dir)
    for to_ignore in ["bashrc", "common.py", "common.pyc"]:
        if to_ignore in available_commands:
            available_commands.remove(to_ignore)

    invalid_command = not os.path.exists(command_path)
    if invalid_command or command == "shell":
        print("\n= Available commands =\n")
        print("\n".join(available_commands))
        print("\nSee also %s" % docs_url)

    if invalid_command:
        sys.exit(1)

    args = [get_bin_path("python"), command_path]

    if len(sys.argv) > 2:
        args.extend(sys.argv[2:])

    os.environ["PATH"] = os.path.expandvars("$PATH:%s" % get_bin_path())

    os.execl(args[0], *args)


if __name__ == "__main__":
    main()
